AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Control Tower Lifecycle Events for CloudKnox (MPCT-yseaalnf)



# ----------------------------------------------------------------------------------------------------------
#  CloudFormation Template 1 of 1 - 
#   
#   This templates allows newly added Control Tower accounts to be managed automatically by CloudKnox
#                                  
#   This template provisions infrastructure in the AWS Control Tower Management account that allows creation of Datadog 
#   stack instances in Control Tower managed accounts whenever a new Control Tower managed account is added
#  
#  1- Creates a CloudKnox Stackset in the AWS Control Tower Management Account 
#  2- Provisions a CloudWatchEvents Rule that is triggered based on a Control Tower Lifecycle Event
#  3- Provisions a Lifecyle Lambda as a target for the CloudWatch Events Rule.
#    - The Lifecycle Lambda deploys a CloudKnox stack in the newly added Control Tower managed account--thus placing 
#      that account under CloudKnox management
#     - Lifecycle Lambda performs a POST on the CloudKnox Account Membership API  - that
#       registers the new AWS managed account in CloudKnox 
#   
# 
#  The infrastructure provisioned by this template in Steps 1-3 allows for a Control Tower lifecycle
#  event trigger (CreateManagedAccount) to 
#       - Trigger the Lifecyle Lambda that creates CloudKnox stack instance in the managed account based on the
#        CloudKnox stackset in the Management account
#     
##
## @kmmahaj
## 
#
# ------------------------------------------------------------...............................................

Parameters:
  CloudKnoxTemplateURL:
    Description: >-
      Base URL for CloudKnox CloudFormation template - CloudKnox Integration Role template
    Type: String
    Default: 'https://cloudknox-controltower-template.s3.amazonaws.com/member-account.yaml'
  SourceBucket:
    Description: S3 Bucket that contains the CloudKnox Add Account API Lambda 
    Type: String
    Default: 's3-cloudknoxiamuserrightsize-<AWS::AccountId>-<AWS::Region>'
    MinLength: '1'
    MaxLength: '255'
  CloudKnoxSentryIAMRoleName:
    Description: IAM role provisioned for CloudKnox Sentry
    Type: String
    Default: IAM_R_KNOX_SECURITY
  CloudKnoxSentryAccountId:
    Description: >-
      CloudKnox Sentry AWS Account ID
    Type: String
    Default: "341476298946"
  

Resources:

# ---------------------------------------------------------------------------------------------------
#  
#  1- Store Parameters for the CloudKnox StackSet in AWS Secrets Manager
#  2- Create a CloudKnox StackSet in the Control Tower Management Account
#      - The CloudKnox StackSet is based on the CloudKnox member.yaml template that is provided by CloudKnox. 
#      - The CloudKnox member.yaml template provisions the CloudKnox Cross Account Role
# --------------------------------------------------------------------------------------------------

 
  CreateCloudKnoxStackSet:
    Type: 'Custom::CloudKnoxStackSet'
    DependsOn:
      - CloudKnoxStackSetLambdaExecutePermission
    Properties:
      ServiceToken: !GetAtt 'CloudKnoxStackSetLambda.Arn'
      cloudknoxUrl: !Ref CloudKnoxTemplateURL
      AccountId: !Ref CloudKnoxSentryAccountId
      ControlTowerMgmtAccountId: !Ref 'AWS::AccountId'
      CloudKnoxSentryIAMRoleName: !Ref CloudKnoxSentryIAMRoleName

  CloudKnoxStackSetLambdaExecutePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'CloudKnoxStackSetLambda.Arn'
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
   
      
  CloudKnoxStackSetLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 256
      Role: !GetAtt 'CloudKnoxStackSetLambdaExecutionRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import botocore
          import os
          import cfnresponse
          import logging
          from botocore.vendored import requests

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
          
              AccountId = event['ResourceProperties']['AccountId']
              ControlTowerMgmtAccountId = event['ResourceProperties']['ControlTowerMgmtAccountId']
              cloudknoxUrl = event['ResourceProperties']['cloudknoxUrl']
              cloudknoxsentryiamrolename = event['ResourceProperties']['CloudKnoxSentryIAMRoleName']

              cList = ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND']
              ExecRole = 'AWSControlTowerExecution'
              AdminRoleARN = 'arn:aws:iam::'+ ControlTowerMgmtAccountId + ':role/service-role/AWSControlTowerStackSetRole'
              logger.info('EVENT Received: {}'.format(event))
              response_data = {}
              eventType = event['RequestType']

              if eventType != 'Delete':
                  logger.info('Event = ' + event['RequestType'])
                  cloudknox_paramList = []
                  keyDict1 = {}
                  keyDict1['ParameterKey'] = 'CloudKnoxSentryIAMRoleName'
                  keyDict1['ParameterValue'] = cloudknoxsentryiamrolename
                  cloudknox_paramList.append(keyDict1)
                  keyDict2 = {}
                  keyDict2['ParameterKey'] = 'CloudKnoxSentryAccountId'
                  keyDict2['ParameterValue'] = AccountId
                  cloudknox_paramList.append(keyDict2)
                  
                  logger.info('CloudKnox ParamList:{}'.format(cloudknox_paramList))
                  cloudformation = boto3.client('cloudformation')
                  cloudknox_result = cloudformation.create_stack_set(StackSetName='CloudKnoxMemberRolev1', \
                                      Description = 'Cross Account Role for CloudKnox', \
                                      TemplateURL = cloudknoxUrl, \
                                      Parameters = cloudknox_paramList, \
                                      AdministrationRoleARN = AdminRoleARN, \
                                      ExecutionRoleName = ExecRole, \
                                      Capabilities = cList )
  
                  logger.info('CloudKnox Stackset: {}'.format(cloudknox_result))
                  cfnsend(event, context, 'SUCCESS', response_data)
                  return "Success"

              else:
                  logger.info(f'Request Type is Delete; unsupported')
                  cfnsend(event, context, 'SUCCESS', response_data)
                  return event

              cfnsend(event, context, 'SUCCESS', response_data)
              return "Success"

     
          def cfnsend(event, context, responseStatus, responseData, reason=None):
              if 'ResponseURL' in event:
                  responseUrl = event['ResponseURL']
                  # Build out the response json
                  responseBody = {}
                  responseBody['Status'] = responseStatus
                  responseBody['Reason'] = reason or 'CWL Log Stream =' + context.log_stream_name
                  responseBody['PhysicalResourceId'] = context.log_stream_name
                  responseBody['StackId'] = event['StackId']
                  responseBody['RequestId'] = event['RequestId']
                  responseBody['LogicalResourceId'] = event['LogicalResourceId']
                  responseBody['Data'] = responseData
                  json_responseBody = json.dumps(responseBody)

                  logger.info(f'Response body: + {json_responseBody}')

                  headers = {
                      'content-type': '',
                      'content-length': str(len(json_responseBody))
                  }
                  # Send response back to CFN
                  try:
                      response = requests.put(responseUrl,
                                              data=json_responseBody,
                                              headers=headers)
                      logger.info(f'Status code: {response.reason}')
                  except Exception as e:
                      logger.info(f'send(..) failed executing requests.put(..):  {str(e)}')
  

  CloudKnoxStackSetLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CloudKnoxStackSetLambdaExecutionRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: GetSecretValue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: Secrets1
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '*'
        - PolicyName: ListSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: Secrets2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource: '*'
        - PolicyName: CloudFormation_ops
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - cloudformation:CreateStackSet
              Resource: !Join [':', ['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/CloudKnoxMemberRolev1:*']]
        - PolicyName: Pass_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Join [':', ['arn:aws:iam:', !Ref "AWS::AccountId", 'role/service-role/AWSControlTowerStackSetRole']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess


# --------------------------------------------------------------------------------------------------
# 
#  1- Provisions a CloudWatchEvents Rule that is triggered based on a Control Tower Lifecycle Event
#  2- Provisions a Lifecyle Lambda as a target for the CloudWatch Events Rule.
# 
# --------------------------------------------------------------------------------------------------

  CloudKnoxCaptureControlTowerLifeCycleEvents:
    DependsOn:
    - TriggerCustomizationsOnLifeCycleEvent
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events for CloudKnox and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          - EnableGuardrail
          - DisableGuardrail
          - SetupLandingZone
          - UpdateLandingZone
          - RegisterOrganizationalUnit
          - DeregisterOrganizationalUnit
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: CloudKnoxCaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents


  #CloudKnox TriggerLifecyleEvent Lambda
  TriggerCustomizationsOnLifeCycleEvent:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join 
        - ''
        - - CloudKnox_
          - TriggerLifecyleEvent
      Role: !GetAtt CloudKnoxTriggerLifecycleEventLambdaRole.Arn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Join 
          - ''
          - - CloudKnox_TriggerLifecycleEvent
            - /
            - CloudKnox_TriggerLifecycleEvent
            - .zip
      Description: CloudKnox Control Tower Lifecycle Event Lambda
      Handler: CloudKnox_TriggerLifecycleEvent.lambda_handler
      MemorySize: '256'
      Runtime: python3.7
      Environment:
        Variables:
          CloudKnoxSentryAccountId : !Ref CloudKnoxSentryAccountId
      Timeout: 300

#CloudKnox Trigger LifecyleEvent Lambda Role
  CloudKnoxTriggerLifecycleEventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub cloudknox-triggerlifecyclelambdarole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudKnoxLifecycleLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}/*
              - Sid: '2'
                Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/CloudKnoxMemberRolev1:*']]
              - Sid: '3'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: '*'
              - Sid: '4'
                Action:
                  - 'secretsmanager:*'
                Effect: Allow
                Resource: '*'
              - Sid: '5'
                Action:
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
     
  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CloudKnoxCaptureControlTowerLifeCycleEvents.Arn"
